[{
 "id": 1,
 "name": "Singleton",
 "text1": "Ensure a class only has one instance, and provide a global point of access to it.",
 "image": "SingletonPattern",
 "type": "Creational",
 "concept": {
 "title": "Concept",
 "description": "A class cannot have multiple instances. Once created, the next time onward, you use only the existing instance. This approach helps you restrict unnecessary object creations in a centralized system. The approach also promotes easy maintenance."
 },
 "realWorldExample": {
 "title": "Real-World Example",
 "description": "Let’s assume that you are a member of a sports team, and your team is participating in a tournament. Your team needs to play against multiple opponents throughout the tournament. Before each of these matches, as per the rules of the game, the captains of the two sides must do a coin toss. If your team does not have a captain, you need to elect someone as a captain. Prior to each game and each coin toss, you may not repeat the process of electing a captain if you already nominated a person as a captain for the team. Basically, from every team member’s perspective, there should be only one captain of the team."
 },
 "computerWorldExample": {
 "title": "Computer-World Example",
 "description": "In some specific software systems, you may prefer to use only one file system for the centralized management of resources. Also, this pattern can implement a caching mechanism."
 },
 "illustration": {
 "title": "Illustration",
 "description": "These are the key characteristics in the following implementation. The constructor is private to prevent the use of a “new” operator. You’ll create an instance of the class, if you did not create any such instance earlier; otherwise, you’ll simply reuse the existing one. To take care of thread safety, I use the “synchronized” keyword."
 },
 "discussion": {
 "title": "Discussion",
 "description": "I have shown you a simple example to illustrate the concept of the singleton pattern. Let’s review the notable characteristics with the following approach. The constructor is private, so you cannot instantiate the Singleton class(Captain) outside. It helps us to refer the only instance that can exist in the system, and at the same time, you restrict the additional object creation of the Captain class. The private constructor also ensures that the Captain class cannot be extended. So, subclasses cannot misuse the concept. I used the “synchronized” keyword. So, multiple threads cannot involve in the instantiation process at the same time. I am forcing each thread to wait its turn to get the method, so thread- safety is ensured. But synchronization is a costly operation and once the instance is created, it is an additional overhead. (I’ll discuss some alternative methods in the upcoming sections, but each of them has its own pros and cons)."
 },
 "pros": ["A", "B"],
 "cons": ["C", "D"]
 },
 {
  "id": 2,
 "name": "Prototype",
 "definition": "Specify the kinds of objects to create using a prototypical instance, and create new objects by copying this prototype.",
 "classDiagramImageName": "PrototypePattern",
 "type": "Creational",
 "concept": {
 "title": "Concept",
 "description": "In general, creating a new instance from scratch is a costly operation. Using the prototype pattern, you can create new instances by copying or cloning an instance of an existing one. This approach saves both time and money in creating a new instance from scratch."
 },
 "realWorldExample": {
 "title": "Real-World Example",
 "description": "Suppose we have a master copy of a valuable document. We need to incorporate some changes to it to see the effect of the change. In such a case, we can make a photocopy of the original document and edit the changes. Consider another example. Suppose a group of people decide to celebrate the birthday of their friend Ron. They go to a bakery and buy a cake. To make it special, they request the seller to write, “Happy Birthday Ron” on the cake. From the seller’s point of view, he is not making any new model. He already defined the model and produces many cakes (which all look the same) every day by following the same process, and finally makes each special with some small changes."
 },
 "computerWorldExample": {
 "title": "Computer-World Example",
 "description": "Let’s assume that you have an application that is very stable. In the future, you may want to update the application with some small modifications. So, you start with a copy of your original application, make changes, and analyze further. Surely, to save your time and money, you do not want to start from scratch."
 },
 "illustration": {
 "title": "Illustration",
 "description": "Here, BasicCar is a basic prototype. Nano and Ford are the concrete prototypes that have implemented the clone() method defined in BasicCar. In this example, we have created a BasicCar class with a default price (in Indian currency). Later, we modify the price per model. PrototypePatternExample.java is the client in this implementation."
 },
 "discussion": {
 "title": "Discussion",
 "description": ""
 },
 "pros": ["A", "B"],
 "cons": ["C", "D"]
 },
 {
  "id": 3,
 "name": "Builder",
 "definition": "Separate the construction of a complex object from its representation so that the same construction processes can create different representations.",
 "classDiagramImageName": "BuilderPattern",
 "type": "Creational",
 "concept": {
 "title": "Concept",
 "description": "The builder pattern is useful for creating complex objects that have multiple parts. The creational mechanism of an object should be independent of these parts. The construction process does not care about how these parts are assembled. The same construction process must allow us to create different representations of the objects. -- Product is the complex object that you want to create. ConcreteBuilder constructs and assembles the parts of a product by implementing an abstract interface, Builder. The ConcreteBuilder objects build the product’s internal representations and define the creational process/assembling mechanisms. Builders can also provide methods to get an object that is created and available for use (notice the getVehicle() method in the Builder interface in the following implementation). Director is responsible for creating the final object using the Builder interface. In other words, Director uses Builder and controls the steps/sequence to build the final Product. Builders can also keep reference of the products that they built, so that they can be used again."
 },
 "realWorldExample": {
 "title": "Real-World Example",
 "description": "To complete an order for a computer, different parts are assembled based on customer preferences (e.g., one customer can opt for a 500 GB hard disk with an Intel processor, and another customer can choose a 250 GB hard disk with an AMD processor). Consider another example. Suppose that you intend to go on a tour with a travel company that provides various packages for the same tour (for example, they can provide special arrangements, a different kind of vehicle for the sightseeing, etc.). You can choose your package based on your budget."
 },
 "computerWorldExample": {
 "title": "Computer-World Example",
 "description": "The builder pattern can be used when we want to convert one text format to another text format (e.g., RTF to ASCII text)."
 },
 "illustration": {
 "title": "Illustration",
 "description": "In this example, we have the following participants: Builder, Car, MotorCycle, Product, and Director. The first three are very straightforward; Car and MotorCycle are concrete classes and they implement the Builder interface. Builder is used to create parts of the Product object, where Product represents the complex object under construction. Since Car and MotorCycle are the concrete implementations of the Builder interface, they need to implement the methods that are declared in the Builder interface. That’s why they needed to supply the body for the startUpOperations() , buildBody() , insertWheels() , addHeadlights() , endOperations() , and getVehicle()methods . The first five methods are straightforward; they are used to perform an operation at the beginning (or end), build the body of the vehicle, insert the wheels, and add headlights. getVehicle() returns the final product. In this case, Director is responsible for constructing the final representation of these products using the Builder interface. (See the structure defined by the GoF). Notice that Director is calling the same construct() method to create different types of vehicles. Now go through the code to see how different parts are assembled for this pattern."
 },
 "discussion": {
 "title": "Discussion",
 "description": ""
 },
 "pros": ["A", "B"],
 "cons": ["C", "D"]
 }]
